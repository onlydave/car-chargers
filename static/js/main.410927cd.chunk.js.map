{"version":3,"sources":["logo.svg","selectList.js","api/fetchEcars.js","LocationStatusList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SelectList","handleInputChange","event","_event$target","target","name","checked","_this","props","addLocation","removeLocation","_this2","this","console","log","_this$props","locations","search","searchRegex","split","map","searchString","RegExp","size","react_default","a","createElement","keySeq","key","find","thisSearchRegex","test","className","type","selectedLocations","has","onChange","src","logo","alt","React","Component","convert","require","typeStatusRegex","fetchEcars","fetch","then","response","text","xml","chargers","xml2js","compact","kml","Document","Placemark","Map","mapLinks","forEach","place","_text","description","_cdata","matches","Object","toConsumableArray","matchAll","mapLink","match","setIn","trim","length","warn","LocationStatusList","openMap","url","currentTarget","dataset","maplink","window","open","style","paddingTop","paddingBottom","location","get","padding","display","alignItems","justifyContent","index_es","icon","faMapMarkerAlt","paddingRight","onClick","data-maplink","color","entrySeq","_ref","_ref2","slicedToArray","plugName","status","available","iconColor","faBolt","faPlug","getSavedImmutable","arguments","undefined","localLocations","localStorage","getItem","fromJS","JSON","parse","value","isKeyed","toMap","toSet","App","state","Set","getLocations","setItem","stringify","toJS","setState","add","setSelected","remove","clearSelected","setSearch","_this$state","placeholder","width","flexGrow","fontSize","border","borderRight","background","borderLeft","faTimes","faSync","selectList","src_LocationStatusList","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.410927cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// @flow\n\nimport React from \"react\";\n\nimport logo from \"./logo.svg\";\n\nimport type { Locations } from \"./api/fetchEcars\";\n\nimport { Set } from \"immutable\";\n\nexport type SelectListProps = {\n  removeLocation: string => null,\n  addLocation: string => null,\n  selectedLocations: Set<string>,\n  locations: Locations,\n  search: string\n};\n\nclass SelectList extends React.Component<SelectListProps> {\n  handleInputChange = (event: SyntheticInputEvent<HTMLInputElement>) => {\n    const {\n      target: { name, checked }\n    } = event;\n\n    if (checked) {\n      this.props.addLocation(name);\n    } else {\n      this.props.removeLocation(name);\n    }\n  };\n\n  render() {\n    console.log(\"render selectList\");\n    const { locations, search } = this.props;\n    const searchRegex = search\n      .split(\" \")\n      .map(searchString => new RegExp(searchString, \"gmi\"));\n    if (!locations.size) {\n      return (\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n      );\n    }\n\n    return (\n      <div>\n        {locations.keySeq().map(key => {\n          if (\n            search &&\n            !!searchRegex.find(thisSearchRegex => !thisSearchRegex.test(key))\n          ) {\n            return null;\n          }\n          return (\n            <label key={key} className=\"selectortron\">\n              <div className=\"ellipsis\">{key}</div>\n              <input\n                name={key}\n                type=\"checkbox\"\n                checked={this.props.selectedLocations.has(key)}\n                onChange={this.handleInputChange}\n              />\n            </label>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default SelectList;\n","// @flow\n\nimport { Map } from \"immutable\";\n\nconst convert = require(\"xml-js\");\n\nexport const topaz =\n  \"Circle K / Topaz Service Station, Templeville Road, Dublin 6, County Dublin\";\nconst typeStatusRegex = /([\\w\\s()-.]*kW\\s)\\(([\\w\\s-,]{3,})\\)/gim;\n\nexport type Locations = Map<string, Map<string, string>>;\n\ntype Placemark = {\n  name: { _text: string },\n  description: { _cdata: string }\n};\n\nexport const fetchEcars = () =>\n  fetch(\n    \"https://cors-anywhere.herokuapp.com/https://www.esb.ie/ECARS/kml/charging-locations.kml\"\n  )\n    .then(response => response.text())\n    .then(xml => {\n      const json = convert.xml2js(xml, { compact: true });\n      const chargers = json.kml.Document.Placemark;\n\n      let locations: Locations = Map({});\n      const mapLinks = {};\n\n      chargers.forEach((place: Placemark) => {\n        const name = place.name._text;\n        const description = place.description._cdata;\n        // $FlowFixMe\n        const matches = [...description.matchAll(typeStatusRegex)];\n\n        const mapLink = description.match(/(https:\\/\\/www.google.com\\S*)\"/);\n        if (mapLink) {\n          mapLinks[name] = mapLink[1];\n        }\n\n        matches.forEach(match => {\n          locations = locations.setIn([name, match[1].trim()], match[2].trim());\n        });\n        if (!matches.length) {\n          console.warn(\"no match:\", description);\n        }\n      });\n\n      return { mapLinks, locations };\n    });\n// .then(str => new DOMParser().parseFromString(str, \"text/xml\"));\n// .then(data => console.log(data));\n\nexport default fetchEcars;\n","// @flow\n\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faBolt,\n  faPlug,\n  faMapMarkerAlt\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport type { Locations } from \"./api/fetchEcars\";\n\nimport { Set } from \"immutable\";\n\nexport type StatusListProps = {\n  removeLocation: string => null,\n  selectedLocations: Set<string>,\n  locations: Locations,\n  mapLinks: {\n    [name: string]: string\n  }\n};\n\nclass LocationStatusList extends React.Component<StatusListProps> {\n  openMap = (event: SyntheticInputEvent<HTMLElement>) => {\n    const url = event.currentTarget.dataset.maplink;\n    if (url) {\n      window.open(url, \"_blank\");\n    }\n  };\n\n  removeLocation = (event: SyntheticInputEvent<HTMLButtonElement>) => {\n    const {\n      target: { name }\n    } = event;\n    this.props.removeLocation(name);\n  };\n\n  render() {\n    const { locations, selectedLocations, mapLinks } = this.props;\n\n    return (\n      <div style={{ paddingTop: 10, paddingBottom: 10 }}>\n        {selectedLocations.map(name => {\n          const location = locations.get(name);\n          if (!location) {\n            return null;\n          }\n\n          return (\n            <div key={name} style={{ padding: 10 }}>\n              <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"flex-start\",\n                  justifyContent: \"space-between\"\n                }}\n              >\n                {name}\n                <FontAwesomeIcon\n                  icon={faMapMarkerAlt}\n                  size=\"2x\"\n                  style={{ paddingRight: 10 }}\n                  onClick={this.openMap}\n                  data-maplink={mapLinks[name]}\n                  color=\"TEAL\"\n                />\n              </div>\n              <div style={{ padding: 5 }}>\n                {location.entrySeq().map(([plugName, status]) => {\n                  const available = status === \"Available\";\n                  const iconColor = available ? \"lime\" : \"grey\";\n                  const color = available ? \"black\" : \"grey\";\n                  const icon = /DC/.test(plugName) ? faBolt : faPlug;\n                  return (\n                    <div key={plugName} style={{ color, padding: 5 }}>\n                      <FontAwesomeIcon\n                        icon={icon}\n                        color={iconColor}\n                        style={{ paddingRight: 5 }}\n                      />\n                      {plugName}: {status}\n                    </div>\n                  );\n                })}\n              </div>\n              <button onClick={this.removeLocation} name={name}>\n                remove location\n              </button>\n              <hr />\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default LocationStatusList;\n","// @flow\nimport React from \"react\";\nimport \"./App.css\";\n\nimport type { Locations } from \"./api/fetchEcars\";\n\nimport SelectList from \"./selectList\";\nimport { Map, Set, fromJS, isKeyed } from \"immutable\";\nimport fetchEcars from \"./api/fetchEcars\";\nimport LocationStatusList from \"./LocationStatusList\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSync, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst getSavedImmutable = (key = \"selectedLocations\") => {\n  const localLocations = localStorage.getItem(key);\n  if (!localLocations) return false;\n  const response = fromJS(JSON.parse(localLocations), function(key, value) {\n    return isKeyed(value) ? value.toMap() : value.toSet();\n  });\n  return (response: any);\n};\n\ntype AppState = {\n  selectedLocations: Set<string>,\n  locations: Locations,\n  search: string,\n  mapLinks: {\n    [name: string]: string\n  }\n};\n\nclass App extends React.Component<{}, AppState> {\n  state = {\n    selectedLocations: getSavedImmutable(\"selectedLocations\") || Set(),\n    locations: getSavedImmutable(\"locations\") || Map(),\n    search: \"\",\n    mapLinks: {}\n  };\n\n  componentDidMount() {\n    this.getLocations();\n  }\n\n  getLocations = () => {\n    fetchEcars().then(({ locations, mapLinks }) => {\n      localStorage.setItem(\"locations\", JSON.stringify(locations.toJS()));\n      this.setState({ locations, mapLinks });\n    });\n  };\n\n  addLocation = (location: string) => {\n    const selectedLocations = this.state.selectedLocations.add(location);\n    return this.setSelected(selectedLocations);\n  };\n\n  removeLocation = (location: string) => {\n    const selectedLocations = this.state.selectedLocations.remove(location);\n    return this.setSelected(selectedLocations);\n  };\n\n  clearSelected = () => {\n    return this.setSelected(Set());\n  };\n\n  setSelected = (\n    selectedLocations: $PropertyType<AppState, \"selectedLocations\">\n  ) => {\n    this.setState({\n      selectedLocations\n    });\n    localStorage.setItem(\n      \"selectedLocations\",\n      JSON.stringify(selectedLocations.toJS())\n    );\n    return null;\n  };\n\n  setSearch = (event: SyntheticInputEvent<HTMLInputElement>) => {\n    this.setState({\n      search: event.target.value\n    });\n  };\n\n  render() {\n    const { locations, selectedLocations, search, mapLinks } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div style={{ display: \"flex\" }}>\n          <input\n            onChange={this.setSearch}\n            value={search}\n            placeholder=\"Search Locations...\"\n            style={{\n              width: 10,\n              flexGrow: 1,\n              padding: 10,\n              fontSize: 30,\n              border: \"1px solid black\",\n              borderRight: \"none\"\n            }}\n          />\n          <button\n            onClick={this.setSearch}\n            value=\"\"\n            style={{\n              paddingRight: 20,\n              background: \"none\",\n              border: \"1px solid black\",\n              borderLeft: \"none\"\n            }}\n          >\n            <FontAwesomeIcon icon={faTimes} size=\"3x\" />\n          </button>\n          <button onClick={this.getLocations} style={{ width: 70 }}>\n            <FontAwesomeIcon icon={faSync} size=\"3x\" />\n          </button>\n        </div>\n        {search || !selectedLocations.size ? (\n          <SelectList\n            search={search}\n            locations={locations}\n            selectedLocations={selectedLocations}\n            removeLocation={this.removeLocation}\n            addLocation={this.addLocation}\n          />\n        ) : (\n          <LocationStatusList\n            locations={locations}\n            selectedLocations={selectedLocations}\n            removeLocation={this.removeLocation}\n            mapLinks={mapLinks}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}